/*
 *  DatumTree.h
 *	Derived from DatumPointPolar
 *	
 *  Created by Mike Fuller.
 *  Copyright 2008. All rights reserved.
 *
 *	PURPOSE:
 *	Used for data representing trees recorded within circular plots. 
 *	Assumes all tree coordinates fall into one of the four quadrants of a 
 *	circle, defined by the angle generated by the position of a point on the 
 *	circumference of the circle. The origin of the plot occurs at 0,0. 
 *	For the unit circle:
 *	
 *	x = 1, y = 0 for theta = 0 degrees or 0 radians or 2 Pi radians
 *	x = 0, y = 1 for theta = 90 degrees or 1/2 Pi radians
 *	x = -1, y = 0 for theta = 180 degrees or Pi radians
 *	x = 0, y = -1 for theta = 270 degrees or 3/2 Pi radians
 *
 *	This class can be used to store and manipulate data representing trees  
 *	and stumps of different species, which are sampled using circular plots.
 *
 *	Two member-variables, angle and radius, allow one to keep track of the  
 *	empirical spatial positions of different points using polar coordinates.  
 *	Functions are included for transforming x-y coordinate pairs into theta  
 *	angles on the unit circle. When combined with the radius of the plot, this
 *	allows groups of points to be cataloged using their theta angles. The 
 *	empirically recorded distances of each point from the plot center are 
 *	coded as a percentage of the fixed plot radius for later reconstruction
 *	of the empirical dimensions.
 *
 */

#ifndef DATUMTREE_H
#define DATUMTREE_H
#include "DatumPointPolar.h"

namespace MMFdata
{	
	class DatumTree : public DatumPointPolar
	{
		public:
			DatumTree(); //some variables set to one, others to zero (see base classs)
			DatumTree(int ID, int spp, int value_int, 
								double value_dec, double X, double Y, 
								int stemc, int stumpc, int mortc, int decayc);
			DatumTree(const DatumTree& dppObject);
			virtual ~DatumTree();
			
			/*******  Accessor Functions *******/
			int get_stemclass() const;
			int get_stumpclass() const;
			int get_mortclass() const;
			int get_decayclass() const;
			
			void set_stemclass(int stemcl);
			void set_stumpclass(int stumpcl);
			void set_mortclass(int mortcl);
			void set_decayclass(int decaycl);
			
			DatumTree& operator =(const DatumTree& rhs);
			bool operator ==(const DatumTree& rhs) const;
			
		private:
			int stem_class;
			int stump_class;
			int mortality_class;
			int decay_class;
		
	};
} //MMFdata

#endif  //DATUMTREE_H